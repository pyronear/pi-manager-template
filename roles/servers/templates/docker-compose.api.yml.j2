services:
  traefik:
    image: traefik:v2.9.6
    container_name: traefik
    ports:
      # http(s) traffic
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - type: bind
        source: ./acme.json
        target: /acme.json
    labels:
      - "traefik.http.middlewares.strip-www.redirectregex.regex=^https?://(www\\.)(.+)"
      - "traefik.http.middlewares.strip-www.redirectregex.replacement=https://$${2}"
      - "traefik.http.middlewares.strip-www.redirectregex.permanent=true"
    command:
      # Enable the Traefik log, for configurations and errors
      - "--log.level=INFO"
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - "--providers.docker=true"
      # Do not expose all Docker services, only the ones explicitly exposed
      - "--providers.docker.exposedbydefault=false"
      # HTTPS
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      # Certificate
      - "--certificatesresolvers.pyroresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.pyroresolver.acme.email=contact@pyronear.org"
      - "--certificatesresolvers.default.acme.storage=/acme.json"
    restart: always
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider  https://{{api_dns}}/status || exit 1"
      interval: 20s
      timeout: 20s
      retries: 10
    depends_on:
      - backend
  backend:
    image: 'pyronear/alert-api:{{pyronear_version}}'
    command: "sh -c 'python app/db.py && uvicorn app.main:app --host 0.0.0.0 --port 8050 --proxy-headers'"
    container_name: api
    environment:
      - DEBUG=false
      - POSTGRES_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db/${POSTGRES_DB}
      - SQLALCHEMY_SILENCE_UBER_WARNING=1
      - SUPERADMIN_LOGIN=${SUPERADMIN_LOGIN}
      - SUPERADMIN_PWD=${SUPERADMIN_PWD}
      - SUPERADMIN_ORG=${SUPERADMIN_ORG}
      - S3_ENDPOINT_URL=${S3_ENDPOINT_URL}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_REGION=${S3_REGION}
      - S3_PREFIX=${S3_PREFIX}
      - SENTRY_DSN=${SENTRY_DSN}
      - SENTRY_SERVER_NAME=${SENTRY_SERVER_NAME}
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - SERVER_NAME=${SERVER_NAME}
      # - POSTHOG_KEY=${POSTHOG_KEY}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`{{api_dns}}`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=pyroresolver"
      - "traefik.http.services.backend.loadbalancer.server.port=8050"
    expose:
      - 8050
    healthcheck:
      test: ["CMD-SHELL", "curl -X 'GET' 'http://backend:8050/status' -H 'accept: application/json'"]
      interval: 20s
      timeout: 20s
      retries: 10
    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres:15-alpine
    container_name: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    expose:
      - 5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
        test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
        interval: 10s
        timeout: 3s
        retries: 3
{% if collocation == true %}
  frontend:
    image: 'pyronear/pyro-platform:{{pyronear_version}}'
    container_name: platform
    expose:
      - 8051
    volumes:
      - ./available_stream.json:/usr/src/app/available_stream.json
    depends_on:
      backend:
        condition: service_healthy
    command: python ./index.py --host 0.0.0.0 --port 8051
    environment:
      - API_URL=${API_URL}
      - API_LOGIN=${API_LOGIN}
      - API_PWD=${API_PWD}
      - LOGIN=${LOGIN}
      - SENTRY_DSN=${SENTRY_DSN}
      - MEDIAMTX_SERVER_URL=${MEDIAMTX_SERVER_URL}
      - DEBUG={{ DEBUG | default('false') }}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`platform{{prefix}}.pyronear.org`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=pyroresolver"
      - "traefik.http.services.frontend.loadbalancer.server.port=8051"
{% endif %}

volumes:
  postgres_data:
