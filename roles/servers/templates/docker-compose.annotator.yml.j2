name: pyronear
services:
  traefik:
      image: traefik:v2.9.6
      container_name: traefik
      ports:
        # http(s) traffic
        - "80:80"
        - "443:443"
      volumes:
        - "/var/run/docker.sock:/var/run/docker.sock:ro"
        - type: bind
          source: ./acme.json
          target: /acme.json
      labels:
        - "traefik.http.middlewares.strip-www.redirectregex.regex=^https?://(www\\.)(.+)"
        - "traefik.http.middlewares.strip-www.redirectregex.replacement=https://$${2}"
        - "traefik.http.middlewares.strip-www.redirectregex.permanent=true"
      command:
        # Enable the Traefik log, for configurations and errors
        - "--log.level=INFO"
        # Enable Docker in Traefik, so that it reads labels from Docker services
        - "--providers.docker=true"
        # Do not expose all Docker services, only the ones explicitly exposed
        - "--providers.docker.exposedbydefault=false"
        # HTTPS
        - "--entryPoints.web.address=:80"
        - "--entryPoints.websecure.address=:443"
        # Certificate
        - "--certificatesresolvers.pyroresolver.acme.tlschallenge=true"
        - "--certificatesresolvers.pyroresolver.acme.email=contact@pyronear.org"
        - "--certificatesresolvers.default.acme.storage=/acme.json"
      restart: always
      healthcheck:
        test: "wget --no-verbose --tries=1 --spider  https://annotationdev.pyronear.org/status || exit 1"
        interval: 20s
        timeout: 20s
        retries: 10
      depends_on:
        - backend

  db:
    image: postgres:15-alpine
    container_name: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    expose:
      - 5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
        test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
        interval: 10s
        timeout: 3s
        retries: 3

  backend:
    image: pyronear/annotation-api:latest
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "5050:5050"
    environment:
      - POSTGRES_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db/${POSTGRES_DB}
      - S3_ENDPOINT_URL=${S3_ENDPOINT_URL}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_REGION=${S3_REGION}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`annotationdev.pyronear.org`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=pyroresolver"
      - "traefik.http.services.backend.loadbalancer.server.port=5050"
    volumes:
      - ./src/:/app/
    command: "sh -c 'python app/db.py && uvicorn app.main:app --reload --host 0.0.0.0 --port 5050 --proxy-headers'"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:5050/status"]
      interval: 10s
      timeout: 20s
      retries: 10

  labelstudio:
    image: heartexlabs/label-studio:latest
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      - POSTGRE_NAME=${POSTGRES_DB}
      - POSTGRE_USER=${POSTGRES_USER}
      - POSTGRE_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRE_PORT=5432
      - POSTGRE_HOST=db
      - S3_ENDPOINT_URL=${S3_ENDPOINT_URL}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_REGION=${S3_REGION}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`labelstudio.pyronear.org`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=pyroresolver"
      - "traefik.http.services.frontend.loadbalancer.server.port=8080"
    volumes:
      - ./mydata:/label-studio/data

volumes:
  postgres_data:
